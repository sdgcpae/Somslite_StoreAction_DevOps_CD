pipeline {
agent any 
           stages {
                stage('Build') {
                     steps{
                     stage("Deploy") {
	       when { expression {env.GIT_BRANCH == 'dev' || env.GIT_BRANCH == 'release'|| propfile['feature_deploy'] == "true" }}
		     steps {
				container('gradle') {
					script {
                                withMaven(maven: 'MAVEN-3.6.3') {
							propfile = readProperties(file: './project.properties')
							if (propfile['feature_deploy'] == "true" ) {
									USERNAME=propfile['USERNAME_FEATURE_DEPLOY']
									HOSTS=propfile['HOSTS_FEATURE_DEPLOY']
								}
								if (env.GIT_BRANCH == 'dev' ) {
									USERNAME=propfile['USERNAME_DEV_DEPLOY']
									HOSTS=propfile['HOSTS_DEV_DEPLOY']
								}
								if (env.GIT_BRANCH == 'release') {
									USERNAME=propfile['USERNAME_RELEASE_DEPLOY']
									HOSTS=propfile['HOSTS_RELEASE_DEPLOY']
								}
								HOSTS.tokenize(',').each { HOSTNAME ->
                
		//Copy EAR
		scp -i /c/Users/ernesto.alvarez/.ssh/id_rsa_jenkins -o StrictHostKeyChecking=no -rp dist/libs/propfile['ear_file'] ${USERNAME}@${HOSTNAME}:propfile['deploy_dir']
		//Copy migration
		scp -i /c/Users/ernesto.alvarez/.ssh/id_rsa_jenkins -o StrictHostKeyChecking=no -rp dist/libs/propfile['ear_file'] ${USERNAME}@${HOSTNAME}:deployment/propfile['target_env']/propfile['migration_file']
		//copy properties
		scp -i /c/Users/ernesto.alvarez/.ssh/id_rsa_jenkins -o StrictHostKeyChecking=no -rp deployment/propfile['target_env']/propfile['properties_file'] ${USERNAME}@${HOSTNAME}:propfile['deploy_dir']
		//set permission
		/bin/chmod 666 propfile['deploy_dir]/propfile['ear_file']
		//set permission
		/bin/chmod 666 propfile['deploy_dir']/propfile['migration_file']
		//set permission
		/bin/chmod 666 propfile['deploy_dir']/propfile['properties_file']
		//Run wasSchedule
		cd propfile['deploy_dir'];/usr/local/was/bin/wasSchedule.s -m propfile['migration_file'] -r `date "+%Y%m%d"`
		//Run wasMigrate
		cd propfile['deploy_dir'];/usr/local/was/bin/wasMigrate.s -m ropfile['migration_file'] -r `date "+%Y%m%d"`
}
		}
	}
   }
 }
}
stage('Post Deploy Tests') {
when { expression {env.GIT_BRANCH == 'dev' || env.GIT_BRANCH == 'release'|| propfile['feature_deploy'] == "true" }}
		parallel {
			stage('Smoke Test') {
				steps {
				  environment {
                                   worksoftcred= credentials('jenkins-worksoft-creds') 
				              }
					echo "I am executing Smoke Test on target dev environment post deployment"
				}
				/*
				echo "username is :propfile['uname']"
				token=$(curl -X POST propfile['uri']/token -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' -d 'grant_type=password&username=propfile['uname']&password=$worksoftcred')
				echo "The token is: $token"
				#Get curl response for any current test executions
				RESP=`curl -X GET "propfile['uri']/RequestsRunning" -H "accept: application/xml" -H "authorization: bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY"`
				echo "The response for current execution status is: $RESP"
				if [ "$RESP" != "[]" ];
				then
				 echo "There is a test executing currently in Worksoft. Hence, not proceeding with the execution of Worksoft test cases."
				 exit 1
				else
				echo "There are no tests executing right now. Hence, proceeding with Worksoft test execution"
				fi 
				guid=$(curl -X PUT -H "Authorization: Bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY" -d "" -H "parameters: TestEnv propfile['stage_name']" -H "id: propfile['RequestID'}" $propfile['uri']/ExecuteRequest/ | tr -d \")
				echo "The GUID is: $guid"

				status=$(curl -X GET -H "Authorization: Bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY" -d "" -H "APIRequestID: $guid" ${uri}/ExecutionStatus/ | awk -F':' '{print $2}' | tr -d \" | tr -d \})
				echo "The status is: $status"

				while [[ $status != *"Completed"* ]]
				 do
					status=$(curl -X GET -H "Authorization: Bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY" -d "" -H "APIRequestID: $guid" $propfile['uri']/ExecutionStatus/ | awk -F':' '{print $2}' | tr -d \" | tr -d \})
					echo "The status is: $status"
				 sleep 15
				 done
				 status=$(curl -X GET -H "Authorization: Bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY" -d "" -H "APIRequestID: $guid" ${uri}/ExecutionStatus/)
				echo "The status is: $status"
				execstatus=$(curl -X GET -H "Authorization: Bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY" -d "" -H "APIRequestID: $guid" ${uri}/ExecutionStatus/ | awk -F':' '{print $3}' | tr -d \" | tr -d \})
				echo "The exec status is: $execstatus"
				if [[ $execstatus != *Passed* ]];
				then
				    echo "Failed"
				    exit 1
				else
				    echo "Passed"
				    exit
				fi
				exit */
			}
			stage('Security Test') {
				steps {
				  container('gradle') {
					script {
						 withMaven(maven: 'MAVEN-3.6.3') {
							echo 'I am running Security Test here'
						     }
				              }
			             }
		               }
		      }
	      }  
	}
     
  }
		
	
  }
}	
